'use strict';
// generated on 2014-07-01 using generator-gulp-webapp 0.1.0

var gulp = require('gulp');

// load plugins
var $ = require('gulp-load-plugins')();
var fileinclude = require('gulp-file-include');
var cssshrink = require('gulp-cssshrink');
var svgmin = require('gulp-svgmin');
var svg2png = require('gulp-svg2png');

// watching or not
var watching = false;

// handle errors without breaking watch
function handleError(err) {
  console.log(err.toString());
    if (watching) {
        this.emit('end');
    }
}

// build scss into stylesheet, prefix, shrink & output to .tmp
gulp.task('styles', function () {
    return gulp.src('app/styles/main.scss')
        .pipe($.rubySass({
            style: 'expanded',
            // require: 'susy',
            precision: 10
        }))
        .on("error", handleError)
        .pipe($.autoprefixer('last 1 version'))
        .pipe(cssshrink())
        .pipe(gulp.dest('.tmp/styles'))
        .pipe($.size());
});

// jshint
gulp.task('scripts', function () {
    return gulp.src('app/scripts/**/*.js')
        .pipe($.jshint())
        .pipe($.jshint.reporter(require('jshint-stylish')))
        .pipe($.size());
});

// preprocess html templates, minify assets & output to .tmp
gulp.task('html', ['styles', 'scripts'], function () {
    var jsFilter = $.filter('**/*.js');
    var cssFilter = $.filter('**/*.css');

    return gulp.src('app/templates/**/*.html')
        .pipe(fileinclude({
          prefix: '@@',
          basepath: '@file'
        }))
        .pipe($.useref.assets({searchPath: '{.tmp,app}'}))
        .pipe(jsFilter)
        .pipe($.uglify())
        .pipe(jsFilter.restore())
        .pipe(cssFilter)
        .pipe($.csso())
        .pipe(cssshrink())
        .pipe(cssFilter.restore())
        .pipe($.useref.restore())
        .pipe($.useref())
        .pipe(gulp.dest('.tmp'))
        .pipe($.size());
});

// minify svg & generate png fallbacks
gulp.task('svg', function () {
    gulp.src('app/images/**/*.svg')
        .pipe(svgmin())
        .pipe(svg2png())
        .pipe($.cache($.imagemin({
            optimizationLevel: 3,
            progressive: true,
            interlaced: true
        })))
        .pipe(gulp.dest('dist/images'))
        .pipe($.size());
});

// minify images, including svg
gulp.task('images', ['svg'], function () {
    return gulp.src('app/images/**/*')
        .pipe($.cache($.imagemin({
            optimizationLevel: 3,
            progressive: true,
            interlaced: true
        })))
        .pipe(gulp.dest('dist/images'))
        .pipe($.size());
});

// move fonts to dist
gulp.task('fonts', function () {
    return $.bowerFiles()
        .pipe($.filter('**/*.{eot,svg,ttf,woff}'))
        .pipe($.flatten())
        .pipe(gulp.dest('dist/fonts'))
        .pipe($.size());
});

// move all misc files to dist
gulp.task('extras', function () {
    return gulp.src(['app/*.*', '!app/*.html'], { dot: true })
        .pipe(gulp.dest('dist'));
});

// output all generated files from .tmp to dist
gulp.task('clone', ['tidy'], function () {
    return gulp.src(['.tmp/**/*'], { dot: true })
        .pipe(gulp.dest('dist'));
});

// clean generated code
gulp.task('clean', function () {
    return gulp.src(['.tmp', 'dist'], { read: false }).pipe($.clean());
});

// tidy up partials that are generated by html task
gulp.task('tidy', function () {
    return gulp.src(['.tmp/partials', 'dist/partials'], { read: false }).pipe($.clean());
});

// build dist
gulp.task('build', ['html', 'images', 'fonts', 'extras'], function () {
    gulp.start('clone');
});

// default task - cleans and then builds
gulp.task('default', ['clean'], function () {
    gulp.start('build');
});

// start server
gulp.task('connect', function () {
    var connect = require('connect');
    var app = connect()
        .use(require('connect-livereload')({ port: 35729 }))
        .use(connect.static('app'))
        .use(connect.static('.tmp'))
        .use(connect.directory('app'));

    require('http').createServer(app)
        .listen(9000)
        .on('listening', function () {
            console.log('Started connect web server on http://localhost:9000');
        });
});

gulp.task('serve', ['connect', 'html'], function () {
    require('opn')('http://localhost:9000');
});

// inject bower components
gulp.task('wiredep', function () {
    var wiredep = require('wiredep').stream;

    gulp.src('app/styles/*.scss')
        .pipe(wiredep({
            directory: 'app/bower_components'
        }))
        .pipe(gulp.dest('app/styles'));

    gulp.src('app/*.html')
        .pipe(wiredep({
            directory: 'app/bower_components'
        }))
        .pipe(gulp.dest('app'));
});

// watch for changes
gulp.task('watch', ['connect', 'serve'], function () {
    var server = $.livereload();

    watching = true;
    gulp.watch([
        '.tmp/*.html',
        '.tmp/styles/**/*.css',
        'app/scripts/**/*.js',
        'app/images/**/*'
    ]).on('change', function (file) {
        server.changed(file.path);
    });

    gulp.watch('app/styles/**/*.scss', ['styles']);
    gulp.watch('app/scripts/**/*.js', ['scripts']);
    gulp.watch('app/images/**/*', ['images']);
    gulp.watch('app/templates/**/*.html', ['html']);
    gulp.watch('bower.json', ['wiredep']);
});
